import loops
from pytest import mark


@mark.parametrize('data', [
    [[1, 2, 3], True],
    [[3, 2, 1], False],
    [[1, 3, 2], False],
    [[0, 1, 1], False],
    [[7, 7, 7], False],
    [list(range(100)), True],
    [[], True],
    [[1], True],
    [[1, 1], False],
])
def test_is_increasing(data):
    assert loops.is_increasing(data[0]) == data[1]


@mark.parametrize('data', [
    [[0, 1, 2, 3], [0, 2, 4, 6]],
    [[], []],
    [[0], [0]],
    [[''], ['']],
    [[1, 77], [2, 154]],
    [['x', 'y'], ['xx', 'yy']],
    [[[]], [[]]],
    [[[1], [[2]]], [[1, 1], [[2], [2]]]],
])
def test_twice_as_much(data):
    assert loops.twice_as_much(data[0]) == data[1]


@mark.parametrize('data', [
    [[], (0, 0)],
    [[1], (0, 1)],
    [[0], (1, 0)],
    [[1, 3, 5, 7], (0, 4)],
    [[2, 4, 6, 8], (4, 0)],
    [list(range(100)), (50, 50)],
    [list(range(10)) + list(range(0, 10, 2)), (10, 5)],
])
def test_count_oddity(data):
    assert loops.count_oddity(data[0]) == data[1]


@mark.parametrize('data', [
    [[[], None], []],
    [[[], -1], []],
    [[[None], -1], [None]],
    [[[-1], -1], []],
    [[[1, 2, 3, 4, 5], 0], [1, 2, 3, 4, 5]],
    [[[1, 2, 3, 4, 5], 1], []],
    [[[1, 2, 3, 4, 5], 2], [1]],
    [[[1, 2, 3, 4, 5], 3], [1, 2]],
    [[[1, 2, 3, 4, 5], 4], [1, 2, 3]],
    [[[1, 2, 3, 4, 5], 5], [1, 2, 3, 4]],
    [[[1, 2, 3, 4, 5], 6], [1, 2, 3, 4, 5]],
    [[[1, 1, 1], 1], []],
    [[[2, 1, 1], 1], [2]],
    [[[2, 1, 1], 2], []],
])
def test_pick_until(data):
    assert loops.pick_until(*data[0]) == data[1]


@mark.parametrize('data', [
    [[[], 0], 0],
    [[[], 1], 0],
    [[[], 100], 0],
    [[[99], 0], 0],
    [[[99], 98], 0],
    [[[99], 100], 99],
    [[[1, 2, 3, 4], 0], 0],
    [[[1, 2, 3, 4], 1], 1],
    [[[1, 2, 3, 4], 2], 1],
    [[[1, 2, 3, 4], 3], 3],
    [[[1, 2, 3, 4], 4], 3],
    [[[1, 2, 3, 4], 5], 3],
    [[[1, 2, 3, 4], 6], 6],
    [[[1, 2, 3, 4], 7], 6],
    [[[1, 2, 3, 4], 9], 6],
    [[[1, 2, 3, 4], 10], 10],
    [[[1, 2, 3, 4], 11], 10],
    [[[1, 2, 3, 4], 15], 10],
    [[[1, 2, 3, 4], 100], 10],
    [[[1, 2, 3, 4], 100], 10],
    [[[1, 0, 4, 0], 4], 1],
    [[[1, 0, 4, 0], 5], 5],
])
def test_sum_until(data):
    assert loops.sum_until(*data[0]) == data[1]
